  public static void showAlertDialog(String title, String content) {
        alertDialog.setTitle(title)
                .setMessage(content)
                .create()
                .show();
    }


================================

public class BluetoothTask extends AsyncTask<Object, Void, String> {
    private final WeakReference<BluetoothCallback<Object>> callback;
    private BluetoothPort bluetoothPort;
    private Thread rThread;

    public BluetoothTask(BluetoothCallback<Object> callback) {
        this.callback = new WeakReference<>(callback);
    }

    public void closeConnection() throws InterruptedException, IOException {
        if ((bluetoothPort != null) && (bluetoothPort.isConnected())) {
            bluetoothPort.disconnect();
        }
        if ((rThread != null) && (rThread.isAlive())) {
            rThread.interrupt();
            rThread = null;
        }
    }

    private String convertAsciiToString(String temp) {
        StringBuilder resultBuilder = new StringBuilder();
        for (int i = 0; i < temp.length(); i++) {
            if (temp.charAt(i) == '\\' && temp.charAt(i + 1) == 'x') {
                String codeString = String.valueOf(temp.charAt(i + 2)) + temp.charAt(i + 3);
                int code = Integer.parseInt(codeString, 16);
                resultBuilder.append((char) code);
                i = i + 3;
            } else {
                resultBuilder.append(temp.charAt(i));
            }
        }

        return resultBuilder.toString();
    }

    @Override
    protected String doInBackground(Object... params) {
        char ESC = ESCPOS.ESC;

        String address = params[0].toString();
        String[] content = (String[]) params[1];
        boolean test = (boolean) params[2];

        bluetoothPort = BluetoothPort.getInstance();
        if (bluetoothPort.isValidAddress(address)) {
            try {
                // Connection
                bluetoothPort.connect(address);
                rThread = new Thread(new RequestHandler());
                rThread.start();

                // Printing
                ESCPOSPrinter escposPrinter = new ESCPOSPrinter("EUC-KR");
                for (String s : content) {

                    // 약속된 예약어
                    if (s.equals("{P}")) {
                        escposPrinter.cutPaper();
                        continue;
                    }

                    if (test) {
                        escposPrinter.printNormal(s);
                    } else {
                        escposPrinter.printNormal(convertAsciiToString(s));
                    }
                }

                /*
                escposPrinter.printNormal(ESC + "|cA" + ESC + "|2CReceipt\r\n\r\n\r\n");
                escposPrinter.printNormal(ESC + "|rATEL (123)-456-7890\n\n\n");
                escposPrinter.printNormal(ESC + "|cAThank you for coming to our shop!\n");
                escposPrinter.printNormal(ESC + "|cADate\n\n");
                escposPrinter.printNormal("!@#$%^&*()_+_|||ㅇ=ⓐ『 ½       $10.00\n");
                escposPrinter.printNormal("Hamburger                           $20.00\n");
                escposPrinter.printNormal("피자                               $30.00\n");
                escposPrinter.printNormal("햄버거                              $40.00\n");
                escposPrinter.printNormal("Drink                               $50.00\n");
                escposPrinter.printNormal("Excluded tax                       $150.00\n");
                escposPrinter.printNormal(ESC + "|uCTax(5%)                              $7.50\n");
                escposPrinter.printNormal(ESC + "|bC" + ESC + "|2CTotal         $157.50\n\n");
                escposPrinter.printNormal("Payment                            $200.00\n");
                escposPrinter.printNormal("Change                              $42.50\n\n");
                escposPrinter.printBarCode("{Babc456789012", LKPrint.LK_BCS_Code128, 40, 512, LKPrint.LK_ALIGNMENT_CENTER, LKPrint.LK_HRI_TEXT_BELOW); // Print Barcode
                 */
                escposPrinter.lineFeed(4);
                escposPrinter.cutPaper();

                Thread.sleep(1000);


            } catch (IOException e) {
                return "Bluetooth connection failed";
            } catch (InterruptedException e) {
                return "Pos Printer failure";
            }
        }

        return "";
    }

    @Override
    protected void onPostExecute(String value) {
        super.onPostExecute(value);

        if (!value.isEmpty()) {
            callback.get().onErrorCallback(value);
        }

        if (null == bluetoothPort) {
            return;
        }

        // Disconnection
        try {
            bluetoothPort.disconnect();
            if ((rThread != null) && (rThread.isAlive())) {
                rThread.interrupt();
                rThread = null;
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public interface BluetoothCallback<T> {
        void onErrorCallback(T result);
    }
}

========================================

BluetoothTask bluetoothTask = new BluetoothTask(result -> {
            DialogUtils.showAlertDialog("Bluetooth Error", result.toString());
        });


